package com.guberan.faq.mapper;

import com.guberan.faq.dto.FaqDto;
import com.guberan.faq.model.ContextItem;
import com.guberan.faq.model.Faq;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ai.document.Document;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static com.guberan.faq.mapper.FaqMapper.MetadataKey.*;
import static org.assertj.core.api.Assertions.assertThat;

class FaqMapperTest {

    private FaqMapper faqMapper;

    @BeforeEach
    void setUp() {
        faqMapper = new FaqMapper();
    }

    @Test
    void testDocumentToFaqDto() {
        Map<String, Object> metadata = Map.of(
                QUESTION.key(), "What is Spring AI?",
                VALIDATED.key(), false,
                AUTO_GENERATED.key(), true,
                ASKED_AT.key(), LocalDateTime.now().toString(),
                SOURCE.key(), "user-input"
        );
        UUID docId = UUID.randomUUID();
        Document doc = new Document(docId.toString(), "Answer text from vector store", metadata);
        FaqDto dto = faqMapper.toDto(doc);

        assertThat(dto.getId()).isEqualTo(docId.toString());
        assertThat(dto.getAnswer()).isEqualTo("Answer text from vector store");
        assertThat(dto.getQuestion()).isEqualTo("What is Spring AI?");
        assertThat(dto.isValidated()).isFalse();
        assertThat(dto.isAutoGenerated()).isTrue();
        assertThat(dto.getAskedAt()).isNotNull();
    }

    @Test
    void testFaqToDtoAndBack() {
        UUID faqId = UUID.randomUUID();
        LocalDateTime now = LocalDateTime.now();
        ContextItem contextItem = new ContextItem("Snippet text", 0.85, UUID.randomUUID());
        Faq faq = new Faq(faqId, "What is Spring AI?", "Spring AI is a project...", true, false, now, List.of(contextItem));

        // Faq -> FaqDto
        FaqDto dto = faqMapper.toDto(faq);
        assertThat(dto.getId()).isEqualTo(faqId.toString());
        assertThat(dto.getQuestion()).isEqualTo("What is Spring AI?");
        assertThat(dto.getAnswer()).isEqualTo("Spring AI is a project...");
        assertThat(dto.isValidated()).isTrue();
        assertThat(dto.getAskedAt()).isEqualTo(now);
        assertThat(dto.getContextItems()).hasSize(1);

        // FaqDto -> Faq
        Faq mappedBack = faqMapper.toFaq(dto);
        assertThat(mappedBack.getId()).isEqualTo(faqId);
        assertThat(mappedBack.getQuestion()).isEqualTo(faq.getQuestion());
        assertThat(mappedBack.getContextItems().get(0).getText()).isEqualTo(contextItem.getText());
    }

    @Test
    void testFaqToDocumentAndBack() {
        UUID faqId = UUID.randomUUID();
        LocalDateTime now = LocalDateTime.now();
        Faq faq = new Faq(faqId, "What is Spring AI?", "Spring AI is a project...", true, true, now, null);

        Document doc = faqMapper.toDocument(faq);
        assertThat(doc.getId()).isEqualTo(faqId.toString());
        assertThat(doc.getText()).isEqualTo("Spring AI is a project...");
        assertThat(doc.getMetadata().get("question")).isEqualTo("What is Spring AI?");
        assertThat(doc.getMetadata().get("validated")).isEqualTo(true);

        // Document -> ContextItem
        ContextItem contextItem = faqMapper.toContextItem(doc);
        assertThat(contextItem.getText()).isEqualTo(doc.getText());
        assertThat(contextItem.getDocId()).isEqualTo(faqId);
    }

    @Test
    void testNullContextItemsHandledGracefully() {
        Faq faq = new Faq(UUID.randomUUID(), "Q", "A", true, true, LocalDateTime.now(), null);
        FaqDto dto = faqMapper.toDto(faq);
        assertThat(dto.getContextItems()).isEmpty();
    }
}