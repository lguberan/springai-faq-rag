package com.guberan.faq.mapper;

import com.guberan.faq.dto.FaqDto;
import com.guberan.faq.model.Faq;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ai.document.Document;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

class FaqMapperTest {

    private FaqMapper faqMapper;

    @BeforeEach
    void setUp() {
        faqMapper = new FaqMapper();
    }

    @Test
    void testToDtoFromFaq() {
        Faq faq = new Faq(UUID.randomUUID(), "What is AI?", "AI stands for Artificial Intelligence.", true, false, LocalDateTime.now(), 0.95, List.of("Snippet 1"));
        FaqDto dto = faqMapper.toDto(faq);

        assertThat(dto.getId()).isEqualTo(faq.getId().toString());
        assertThat(dto.getQuestion()).isEqualTo(faq.getQuestion());
        assertThat(dto.getAnswer()).isEqualTo(faq.getAnswer());
        assertThat(dto.isValidated()).isEqualTo(faq.isValidated());
    }

    @Test
    void testToFaqFromDto() {
        FaqDto dto = new FaqDto(UUID.randomUUID().toString(), "What is Spring?", "Spring is a Java framework.", true, true, LocalDateTime.now(), 0.85, List.of("Snippet A"));
        Faq faq = faqMapper.toFaq(dto);

        assertThat(faq.getId().toString()).isEqualTo(dto.getId());
        assertThat(faq.getQuestion()).isEqualTo(dto.getQuestion());
        assertThat(faq.getAnswer()).isEqualTo(dto.getAnswer());
        assertThat(faq.isValidated()).isEqualTo(dto.isValidated());
    }

    @Test
    void testToDocument() {
        Faq faq = new Faq(UUID.randomUUID(), "Explain Kubernetes", "Kubernetes is a container orchestration system.", true, true, LocalDateTime.now(), 0.9, List.of());
        Document doc = faqMapper.toDocument(faq);

        assertThat(doc.getId()).isEqualTo(faq.getId().toString());
        assertThat(doc.getText()).isEqualTo(faq.getAnswer());
        Map<String, Object> metadata = doc.getMetadata();
        assertThat(metadata.get(FaqMapper.QUESTION_KEY)).isEqualTo(faq.getQuestion());
        assertThat(metadata.get(FaqMapper.VALIDATED_KEY)).isEqualTo(faq.isValidated());
        assertThat(metadata.get(FaqMapper.AUTO_GENERATED_KEY)).isEqualTo(faq.isAutoGenerated());
    }
}