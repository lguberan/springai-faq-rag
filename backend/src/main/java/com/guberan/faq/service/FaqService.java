package com.guberan.faq.service;

import com.guberan.faq.dto.FaqDto;
import com.guberan.faq.mapper.FaqMapper;
import com.guberan.faq.model.Faq;
import com.guberan.faq.repository.FaqRepository;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.client.advisor.vectorstore.QuestionAnswerAdvisor;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.document.Document;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;


@Service
@Slf4j
public class FaqService {
    public static final int TOP_K = 8;
    // Minimum similarity score to accept results; allows broad matches while filtering out irrelevant content
    public static final double SIMILARITY_THRESHOLD = 0.4;


    private final VectorStore vectorStore;
    private final ChatClient chatClient;
    private final FaqRepository faqRepository;
    private final FaqMapper faqMapper;
    private final QuestionAnswerAdvisor questionAnswerAdvisor;

    public FaqService(VectorStore vectorStore, ChatClient chatClient, FaqRepository faqRepository, FaqMapper faqMapper) {
        this.vectorStore = vectorStore;
        this.chatClient = chatClient;
        this.faqRepository = faqRepository;
        this.faqMapper = faqMapper;
        this.questionAnswerAdvisor = new QuestionAnswerAdvisor(this.vectorStore,
                SearchRequest.builder().topK(TOP_K).similarityThreshold(SIMILARITY_THRESHOLD).build());
    }

    public List<FaqDto> getValidated(Boolean validated) {
        if (validated == null) {
            return faqRepository.findAll().stream().map(faqMapper::toDto).toList();
        }
        return faqRepository.findByValidated(validated).stream().map(faqMapper::toDto).toList();
    }

    public FaqDto ask(String userQuestionStr) {
        // Retrieve relevant documents
        List<Document> retrievedDocs = findSimilarValidatedFaq(userQuestionStr);
        List<String> snippets = retrievedDocs.stream().map(Document::getText).toList();

        ChatResponse response = chatClient
                .prompt()
                .advisors(questionAnswerAdvisor)
                .user(userQuestionStr)
                .call()
                .chatResponse();

        Faq faq = new Faq(userQuestionStr, response.getResult().getOutput().getText(), snippets);
        faqRepository.save(faq);

        return faqMapper.toDto(faq);
    }

    public FaqDto validateResponse(FaqDto dto) {
        Faq faq = faqRepository.getReferenceById(UUID.fromString(dto.getId()));
        faq.setAutoGenerated(StringUtils.equals(faq.getAnswer(), dto.getAnswer()));
        faq.setAnswer(dto.getAnswer());
        faq.setValidated(true);
        faqRepository.save(faq);
        vectorStore.add(List.of(faqMapper.toDocument(faq)));
        log.info("âœ… FAQ response added to RAG {}", faq.getId());
        return faqMapper.toDto(faq);
    }


    public void deleteFaq(UUID faqId) {
        faqRepository.deleteById(faqId);
        vectorStore.delete(List.of(faqId.toString()));
    }

    public List<Document> findSimilarValidatedFaq(String userQuestionStr) {
        SearchRequest searchRequest = SearchRequest.builder()
                .query(userQuestionStr)
                .topK(TOP_K)
                .similarityThreshold(SIMILARITY_THRESHOLD)
                .build();
        return vectorStore.similaritySearch(searchRequest);
    }

}
