package com.guberan.faq.mapper;

import com.guberan.faq.dto.FaqDto;
import com.guberan.faq.model.ContextItem;
import com.guberan.faq.model.Faq;
import lombok.AllArgsConstructor;
import org.springframework.ai.document.Document;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import static com.guberan.faq.mapper.FaqMapper.MetadataKey.*;


@Component
public class FaqMapper {

    public FaqDto toDto(Document doc) {
        return new FaqDto(doc);
    }

    public FaqDto toDto(Faq faq) {
        return new FaqDto(String.valueOf(faq.getId()), faq.getQuestion(), faq.getAnswer(), faq.isValidated(), faq.isAutoGenerated(), faq.getAskedAt(), toContextItemDtos(faq.getContextItems()));
    }

    public Faq toFaq(FaqDto dto) {
        return new Faq(UUID.fromString(dto.getId()), dto.getQuestion(), dto.getAnswer(), dto.isValidated(), dto.isAutoGenerated(), dto.getAskedAt(), toContextItems(dto.getContextItems()));
    }

    public Document toDocument(Faq faq) {
        Map<String, Object> metadata = Map.of(
                QUESTION.key(), faq.getQuestion(),
                VALIDATED.key(), faq.isValidated(),
                AUTO_GENERATED.key(), faq.isAutoGenerated(),
                ASKED_AT.key(), String.valueOf(faq.getAskedAt()),
                SOURCE.key(), "user-input"
        );
        return new Document(faq.getId().toString(), faq.getAnswer(), metadata);
    }

    public List<FaqDto.ContextItemDto> toContextItemDtos(List<ContextItem> contextItems) {
        return (contextItems == null) ? List.of() : contextItems.stream().map(this::toDto).toList();
    }

    private List<ContextItem> toContextItems(List<FaqDto.ContextItemDto> contextItemDtos) {
        return (contextItemDtos == null) ? List.of() : contextItemDtos.stream().map(this::toContextItem).toList();
    }

    public FaqDto.ContextItemDto toDto(ContextItem contextItem) {
        return new FaqDto.ContextItemDto(contextItem.getText(), contextItem.getScore(), String.valueOf(contextItem.getDocId()));
    }

    public ContextItem toContextItem(FaqDto.ContextItemDto itemDto) {
        return new ContextItem(itemDto.text(), itemDto.score(), safeUUID(itemDto.docId()));
    }

    public ContextItem toContextItem(Document doc) {
        return new ContextItem(doc.getText(), Optional.ofNullable(doc.getScore()).orElse(0.0), safeUUID(doc.getId()));
    }

    private UUID safeUUID(String str) {
        return (str == null) ? null : UUID.fromString(str);
    }

    @AllArgsConstructor
    public enum MetadataKey {
        QUESTION("question"),
        VALIDATED("validated"),
        AUTO_GENERATED("autoGenerated"),
        ASKED_AT("askedAt"),
        SOURCE("source");

        private final String key;

        public String key() {
            return key;
        }
    }
}
